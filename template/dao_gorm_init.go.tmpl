package {{.daoPackageName}}

import (
	"fmt"
	"reflect"
	"time"

	"github.com/jinzhu/gorm"
)

var (
    // ErrNotFound error when record not found
	ErrNotFound  = fmt.Errorf("record Not Found")

	// ErrUnableToMarshalJSON error when json payload corrupt
    ErrUnableToMarshalJSON  = fmt.Errorf("json payload corrupt")

    // ErrUpdateFailed error when update fails
	ErrUpdateFailed  = fmt.Errorf("db update error")

	// ErrInsertFailed error when insert fails
	ErrInsertFailed  = fmt.Errorf("db insert error")

	// ErrDeleteFailed error when delete fails
	ErrDeleteFailed  = fmt.Errorf("db delete error")

	// ErrBadParams error when bad params passed in
	ErrBadParams  = fmt.Errorf("bad params error")

	// ErrUniqueConflict error when unique key conflict
	ErrUniqueConflict = fmt.Errorf("unique conflict")
    // DB reference to database
	DB           *gorm.DB
)

// structToNestedMap 将简单结构体转化为map、sclice嵌套结构
// 注意: 以下情况会panic
// 转化包含循环引用的结构体
// 转化包含无法在map中使用的类型(函数、通道、复数)结构体
func structToNestedMap(obj interface{}) interface{} {
	objValue := reflect.ValueOf(obj)
	objType := objValue.Type()

	switch objType.Kind() {
	case reflect.Struct:
		if _, ok := obj.(time.Time); ok {
			return obj
		}

		result := make(map[string]interface{})

		for i := 0; i < objType.NumField(); i++ {
			if !objValue.Field(i).CanInterface() {
				continue
			}
			field := objType.Field(i)                     // 获取字段的元数据
			value := objValue.Field(i).Interface()        // 获取字段的值
			result[field.Name] = structToNestedMap(value) // 递归调用 structToNestedMap 处理字段值，并将结果存入 map
		}

		return result

	case reflect.Slice, reflect.Array:
		result := make([]interface{}, objValue.Len())

		for i := 0; i < objValue.Len(); i++ { // 遍历切片或数组
			value := objValue.Index(i).Interface()
			result[i] = structToNestedMap(value)
		}

		return result
	case reflect.Ptr: // 如果是指针
		return structToNestedMap(objValue.Elem().Interface())
	default:
		return obj
	}
}
